/* Generated By:JavaCC: Do not edit this line. R1bj.java */
import java.io.*;
import java.util.ArrayList;
class R1bj implements R1bjConstants {
  private PrintWriter outFile;
  private R1bjSymTab st;
  private R1bjCodeGen cg;
  //-----------------------------------------
  public static void main(String[] args) throws
                                             IOException
  {
    System.out.println("R1bj compiler written by Hung Phan, Sen Shen and Shir Lie Ooi");

    if (args.length != 1)
    {
      System.err.println("Wrong number cmd line args");
      System.exit(1);
    }

    // build input and output file names
    String inFileName = args[0] + ".s";
    String outFileName = args[0] + ".a";

    // construct file objects
    FileInputStream inFile =
                       new FileInputStream(inFileName);
    PrintWriter outFile = new PrintWriter(outFileName);

    // identify compiler/author in output file
    outFile.println("; R1bj compiler written by Hung Phan, Sen Shen and Shir Lie Ooi");
    outFile.println("!register");

    // construct objects that make up compiler
    R1bjSymTab st = new R1bjSymTab();
    R1bjCodeGen cg = new R1bjCodeGen(outFile, st);
    R1bj parser = new R1bj(inFile);

    // initialize parser's instance variables
    parser.outFile = outFile;
    parser.st = st;
    parser.cg = cg;

    try
    {
      parser.program();
    }
    catch(ParseException e)
    {
      System.err.println(e.getMessage());
      outFile.println(e.getMessage());
      outFile.close();
      System.exit(1);
    }

    outFile.close();
  }
  //-----------------------------------------
  // If COMMON_TOKEN_ACTION is true, the token manager 
  // calls makeComment for each token to create the
  // token trace.
  //
  public void makeComment(Token t)
  {
    outFile.printf(
      "; kd=%3d bL=%3d bC=%3d eL=%3d eC=%3d im= %s%n",
       t.kind, t.beginLine, t.beginColumn, t.endLine,
       t.endColumn, t.image);
  }

// Translation grammar for R1bj and R1b ==================
  final public void program() throws ParseException {
    statementList();
    cg.endCode();
    jj_consume_token(0);
  }

//------------------------------
  final public void statementList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINTLN:
    case ID:
      statement();
      statementList();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

//------------------------------
  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      assignmentStatement();
      break;
    case PRINTLN:
      printlnStatement();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//------------------------------
  final public void assignmentStatement() throws ParseException {
                             Token t; int left, expVal;
    t = jj_consume_token(ID);
     left = st.enter(t.image, "0", true);
    jj_consume_token(ASSIGN);
    expVal = expr();
     cg.assign(left, expVal);
    jj_consume_token(SEMICOLON);
  }

//------------------------------
  final public void printlnStatement() throws ParseException {
                          int expVal;
    jj_consume_token(PRINTLN);
    jj_consume_token(LEFTPAREN);
    expVal = expr();
     cg.println(expVal);
    jj_consume_token(RIGHTPAREN);
    jj_consume_token(SEMICOLON);
  }

//------------------------------
  final public int expr() throws ParseException {
             int left, expVal;
    left = term();
    expVal = termList(left);
    {if (true) return expVal;}
    throw new Error("Missing return statement in function");
  }

//------------------------------
  final public int termList(int left) throws ParseException {
                         int right, temp, expVal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      right = term();
    temp = cg.add(left, right);
      expVal = termList(temp);
    {if (true) return expVal;}
      break;
    default:
      jj_la1[2] = jj_gen;
    {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

//------------------------------
  final public int term() throws ParseException {
             int left, termVal;
    left = factor();
    termVal = factorList(left);
    {if (true) return termVal;}
    throw new Error("Missing return statement in function");
  }

//------------------------------
  final public int factorList(int left) throws ParseException {
                           int right, temp, termVal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      jj_consume_token(TIMES);
      right = factor();
    temp = cg.mult(left, right);
      termVal = factorList(temp);
    {if (true) return termVal;}
      break;
    default:
      jj_la1[3] = jj_gen;
    {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

//------------------------------
  final public int factor() throws ParseException {
               Token t; int index;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNSIGNED:
      t = jj_consume_token(UNSIGNED);
    index = st.enter("@" + t.image, t.image, true);
    {if (true) return index;}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      t = jj_consume_token(UNSIGNED);
    index = st.enter("@" + t.image, t.image, true);
    {if (true) return index;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = jj_consume_token(UNSIGNED);
    index = st.enter("@_" + t.image, "-" + t.image, true);
    {if (true) return index;}
      break;
    case ID:
      t = jj_consume_token(ID);
    index = st.enter(t.image, "0", true);
    {if (true) return index;}
      break;
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      index = expr();
      jj_consume_token(RIGHTPAREN);
    {if (true) return index;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public R1bjTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0,0xa0,0x1000,0x4000,0x34c0,};
   }

  /** Constructor with InputStream. */
  public R1bj(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public R1bj(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new R1bjTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public R1bj(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new R1bjTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public R1bj(R1bjTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(R1bjTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}                                          // end of R1bj
//======================================================
class R1bjSymTab
{
  private ArrayList<String> symbol;
  private ArrayList<String> dwValue;
  private ArrayList<Boolean> needsdw;
  //-----------------------------------------
  public R1bjSymTab()
  {
    symbol = new ArrayList<String>();
    dwValue = new ArrayList<String>();
    needsdw = new ArrayList<Boolean>();
  }
  //-----------------------------------------
  public int enter(String s, String v, Boolean b)
  {
    int index = symbol.indexOf(s);
    if (index >= 0)     // s already in symbol?
        return index;   // yes, then return its index

    index = symbol.size();
    symbol.add(s);              // add symbol
    dwValue.add(v);             // aa value
    needsdw.add(b);             // add needsdw value
    return index;
  }
  //-----------------------------------------
  public String getSymbol(int i)
  {
    return symbol.get(i);
  }
  //-----------------------------------------
  public String getdwValue(int i)
  {
    return dwValue.get(i);
  }
  //-----------------------------------------
  public Boolean getNeedsdw(int i)
  {
    return needsdw.get(i);
  }
  //-----------------------------------------
  public void setNeedsdw(int i)
  {
    needsdw.set(i, true);
  }
  //-----------------------------------------
  public Boolean isConstant(int i)
  {
        if (i < 0) return false;
        String s = symbol.get(i);
        if (s.length() >= 2 && s.charAt(0) == '@' &&
                (s.charAt(1) == '_' || Character.isDigit(s.charAt(1))))
                return true;
        else
                return false;
  }
  //-----------------------------------------
  public Boolean isldcConstant(int i)
  {
    if (isConstant(i))
      if(Integer.parseInt(getdwValue(i)) >= 0 &&
        Integer.parseInt(getdwValue(i)) <= 4095)
        return true;
        return false;
  }
  //-----------------------------------------
  public Boolean isTemp(int opndIndex)
  {
    return getSymbol(opndIndex).startsWith("@t");
  }
  //-----------------------------------------
  public int getSize()
  {
    return symbol.size();
  }
}                                    // end of R1bjSymTab
//======================================================
class R1bjCodeGen
{
  private PrintWriter outFile;
  private R1bjSymTab st;
  private int tempIndex;
  //-----------------------------------------
  public R1bjCodeGen(PrintWriter outFile, R1bjSymTab st)
  {
    this.outFile = outFile;
    this.st = st;
    this.tempIndex = 0;
  }
  //-----------------------------------------
  public int add(int left, int right)
  {
        emitLoad(left);
        emitInstruction("add", right);
        freeTemp(left);
        freeTemp(right);
        int temp = getTemp();           // returns index
        emitInstruction("st", temp);
        return temp;
  }
  //-----------------------------------------
  public int mult(int left, int right)
  {
        emitLoad(left);
        emitInstruction("mult", right);
        freeTemp(left);
        freeTemp(right);
        int temp = getTemp();           // returns index
        emitInstruction("st", temp);
        return temp;
  }
  //-----------------------------------------
  public void assign(int left, int expVal)
  {
        emitLoad(expVal);
        freeTemp(expVal);
        emitInstruction("st", left);
  }
  //-----------------------------------------
  public void println(int expVal)
  {
        emitLoad(expVal);
        freeTemp(expVal);
        emitInstruction("dout");
        emitInstruction("ldc", "'\u005c\u005cn'");
        emitInstruction("aout");
  }
  //-----------------------------------------
  public void emitLoad(int opndIndex)
  {
    if(st.isldcConstant(opndIndex))
        emitInstruction("ldc", st.getdwValue(opndIndex));
    else
        emitInstruction("ld", opndIndex);
  }
  //-----------------------------------------
  public int getTemp()
  {
        String temp = "@t" + tempIndex++;       // create temp
        return st.enter(temp, "0", true);       // return index
  }
  //-----------------------------------------
  private void freeTemp(int opndIndex)
  {
    if (st.isTemp(opndIndex))
        tempIndex--;
  }
  //-----------------------------------------
  public void emitInstruction(String op)
  {
    outFile.printf("          %-4s%n", op);
  }
  //-----------------------------------------
  public void emitInstruction(String op, String opnd)
  {
    outFile.printf(
                  "          %-4s      %s%n", op, opnd);
  }
  //-----------------------------------------
  public void emitInstruction(String op, int opndIndex)
  {
    emitInstruction(op, st.getSymbol(opndIndex));
  }
  //-----------------------------------------
  public void emitdw(String label, String value)
  {
    outFile.printf(
             "%-9s dw        %s%n", label + ":", value);
  }
  //-----------------------------------------
  public void endCode()
  {
    outFile.println();
    emitInstruction("halt");

    int size = st.getSize();
    // emit dw for each symbol in the symbol table
    for (int i=0; i < size; i++)
        if(st.getNeedsdw(i))
                emitdw(st.getSymbol(i), st.getdwValue(i));
  }
}
